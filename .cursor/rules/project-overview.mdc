---
alwaysApply: true
description: 项目总览和开发规范总结
---

# Vue.js个人主页项目总览

## 项目简介
这是一个基于Vue 3 + Vite的现代化个人主页项目，采用Composition API和原生CSS，提供响应式设计和主题切换功能。

## 技术栈
- **前端框架**: Vue 3.5.18 (Composition API)
- **构建工具**: Vite 7.1.2
- **图标库**: @iconify/vue 5.0.0
- **样式**: 原生CSS + CSS变量
- **开发语言**: JavaScript (ES6+)

## 核心功能
- 个人信息展示和联系方式
- 技术栈可视化展示
- 实时时间进度显示
- 地理位置欢迎信息
- MBTI人格类型展示
- 博客文章订阅
- 打字机效果
- 明暗主题切换

## 项目结构
```
src/
├── main.js                 # 应用入口
├── App.vue                 # 根组件
├── style.css              # 全局样式和主题变量
├── assets/css/            # 样式文件
│   ├── App.css            # 应用样式
│   └── MainCard.css       # 主卡片样式
├── components/            # 可复用组件
│   ├── Loading.vue        # 加载组件
│   └── Typewriter.vue     # 打字机组件
├── views/                 # 页面组件
│   └── MainCard.vue       # 主卡片视图
└── config/                # 配置文件
    ├── config.json        # 个人信息
    ├── techStack.json     # 技术栈
    ├── typewriter.json    # 打字机文本
    ├── welcome.json       # 欢迎信息
    ├── blog.json          # 博客配置
    └── linkBtn.json       # 链接按钮
```

## 开发规范总结

### Vue组件开发
- 使用`<script setup>`语法
- 遵循Composition API最佳实践
- 组件单一职责原则
- 合理的props和emit设计

### 样式管理
- 使用CSS变量管理主题
- 支持明暗主题切换
- 响应式设计优先
- 统一的卡片设计系统

### 配置管理
- JSON配置文件统一管理
- 模块化配置结构
- 类型安全的配置使用
- 环境变量支持

### 性能优化
- Vue 3响应式优化
- Vite构建优化
- 图片和资源优化
- 代码分割和懒加载

### 测试策略
- 单元测试覆盖核心逻辑
- 组件测试验证UI交互
- E2E测试确保用户流程
- 持续集成和部署

## 开发工作流

### 本地开发
```bash
npm run dev          # 启动开发服务器
npm run build        # 构建生产版本
npm run preview      # 预览构建结果
```

### 代码质量
- 遵循Vue 3官方风格指南
- 使用ESLint进行代码检查
- 保持代码简洁和可读性
- 定期进行代码审查

### 部署流程
- 构建优化后的静态文件
- 部署到CDN或静态托管服务
- 配置适当的缓存策略
- 监控生产环境性能

## 扩展指南

### 添加新功能
1. 在`src/config/`中添加相关配置
2. 在`MainCard.vue`中实现功能逻辑
3. 在`MainCard.css`中添加样式
4. 更新相关配置文件

### 自定义主题
1. 修改`src/style.css`中的CSS变量
2. 更新`[theme="dark"]`和`[theme="light"]`样式
3. 确保所有组件支持主题切换

### 添加新组件
1. 在`src/components/`中创建组件文件
2. 遵循Vue组件开发规范
3. 在需要的地方导入和使用
4. 添加相应的测试用例

## 最佳实践提醒
- 保持配置文件的简洁和可维护性
- 使用语义化的组件和类名
- 优化图片和静态资源
- 定期更新依赖包
- 关注性能指标和用户体验
- 编写清晰的代码注释
- 遵循无障碍访问标准