---
globs: *.vue,*.js,*.css
description: 性能优化最佳实践
---

# 性能优化最佳实践

## Vue 3 性能优化

### 响应式优化
- 使用`shallowRef()`和`shallowReactive()`减少深度响应式开销
- 避免在模板中使用复杂计算，使用`computed()`
- 使用`markRaw()`标记不需要响应式的对象
- 合理使用`readonly()`避免意外修改

### 组件优化
- 使用`defineAsyncComponent()`进行组件懒加载
- 使用`v-memo`优化列表渲染性能
- 避免在模板中创建内联函数
- 使用`v-once`缓存静态内容

### 渲染优化
- 合理使用`v-show`和`v-if`
- 使用`key`属性优化列表更新
- 避免不必要的组件重新渲染
- 使用`keep-alive`缓存组件状态

## Vite 构建优化

### 构建配置
- 启用代码分割和懒加载
- 使用Tree Shaking移除未使用代码
- 配置合适的chunk大小
- 启用Gzip压缩

### 资源优化
- 图片使用WebP格式
- 启用CSS代码分割
- 使用CDN加速静态资源
- 配置合适的缓存策略

### 开发体验
- 启用HMR（热模块替换）
- 使用ESBuild进行快速构建
- 配置合理的devServer选项
- 启用Source Map用于调试

## 网络性能优化

### 资源加载
- 使用`<link rel="preload">`预加载关键资源
- 使用`<link rel="prefetch">`预取非关键资源
- 启用HTTP/2多路复用
- 使用Service Worker缓存策略

### 图片优化
- 使用响应式图片（srcset）
- 启用图片懒加载
- 压缩图片文件大小
- 使用适当的图片格式

### 字体优化
- 使用`font-display: swap`
- 预加载关键字体
- 避免字体闪烁（FOUT）
- 使用系统字体作为后备

## 运行时性能优化

### JavaScript优化
- 避免频繁的DOM操作
- 使用`requestAnimationFrame`优化动画
- 避免内存泄漏
- 使用Web Workers处理重计算

### CSS优化
- 避免复杂的CSS选择器
- 使用`transform`和`opacity`进行动画
- 避免强制重排和重绘
- 使用CSS Containment

### 事件处理优化
- 使用事件委托减少事件监听器
- 防抖和节流处理频繁事件
- 及时清理事件监听器
- 使用`passive`事件监听器

## 监控和调试

### 性能监控
- 使用Vue DevTools分析组件性能
- 监控Core Web Vitals指标
- 使用Lighthouse进行性能审计
- 设置性能预算

### 调试工具
- 使用浏览器Performance面板
- 监控内存使用情况
- 分析网络请求
- 使用Vue DevTools Timeline

## 最佳实践总结

### 开发阶段
- 遵循Vue 3最佳实践
- 使用TypeScript增强类型安全
- 编写可测试的代码
- 定期进行性能审查

### 构建阶段
- 优化构建配置
- 启用生产环境优化
- 压缩和混淆代码
- 生成Source Map用于调试

### 部署阶段
- 使用CDN加速
- 配置合适的缓存策略
- 启用HTTPS
- 监控生产环境性能

### 持续优化
- 定期更新依赖
- 监控性能指标
- 收集用户反馈
- 持续改进用户体验